{
  "info": {
    "name": "Microservices API",
    "_postman_id": "f9e4a2d8-2e6a-4e4b-b5af-909e3f44abcd",
    "description": "Postman collection for API Gateway, Users and Orders services (Node.js microservices).\nIncludes tests for key scenarios.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000"
    },
    {
      "key": "jwtToken",
      "value": ""
    }
  ],
  "item": [
    {
      "name": "Health",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/v1/health",
          "host": ["{{baseUrl}}"],
          "path": ["v1", "health"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', () => pm.response.to.have.status(200));",
              "const json = pm.response.json();",
              "pm.expect(json.success).to.eql(true);"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Users",
      "item": [
        {
          "name": "Register",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test{{timestamp}}@example.com\",\n  \"password\": \"123456\",\n  \"name\": \"Tester\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/users/register",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "users", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 200', () => pm.response.to.have.status(200));",
                  "const json = pm.response.json();",
                  "pm.expect(json.success).to.eql(true);",
                  "pm.expect(json.data.id).to.be.a('string');"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Login",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"123456\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/users/login",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "users", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 200', () => pm.response.to.have.status(200));",
                  "const json = pm.response.json();",
                  "pm.expect(json.success).to.eql(true);",
                  "pm.expect(json.data.token).to.be.a('string');",
                  "pm.environment.set('jwtToken', json.data.token);"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Profile",
          "request": {
            "method": "GET",
            "header": [
              { "key": "Authorization", "value": "Bearer {{jwtToken}}" }
            ],
            "url": {
              "raw": "{{baseUrl}}/v1/users/me",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "users", "me"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 200', () => pm.response.to.have.status(200));",
                  "const json = pm.response.json();",
                  "pm.expect(json.success).to.eql(true);",
                  "pm.expect(json.data.email).to.be.a('string');"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Profile",
          "request": {
            "method": "PUT",
            "header": [
              { "key": "Authorization", "value": "Bearer {{jwtToken}}" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \"name\": \"Updated Tester\" }"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/users/me",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "users", "me"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 200', () => pm.response.to.have.status(200));",
                  "pm.expect(pm.response.json().success).to.eql(true);"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Orders",
      "item": [
        {
          "name": "Create Order",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Authorization", "value": "Bearer {{jwtToken}}" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \"items\": [ { \"productId\": \"sku-123\", \"quantity\": 2, \"price\": 10.5 } ] }"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/orders",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "orders"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Order created', () => pm.response.to.have.status(200));",
                  "const json = pm.response.json();",
                  "pm.expect(json.success).to.eql(true);",
                  "pm.environment.set('orderId', json.data.id);"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get My Orders",
          "request": {
            "method": "GET",
            "header": [
              { "key": "Authorization", "value": "Bearer {{jwtToken}}" }
            ],
            "url": {
              "raw": "{{baseUrl}}/v1/orders?page=1&limit=5",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "orders"],
              "query": [
                { "key": "page", "value": "1" },
                { "key": "limit", "value": "5" }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 200', () => pm.response.to.have.status(200));",
                  "pm.expect(pm.response.json().success).to.eql(true);"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Order by ID",
          "request": {
            "method": "GET",
            "header": [
              { "key": "Authorization", "value": "Bearer {{jwtToken}}" }
            ],
            "url": {
              "raw": "{{baseUrl}}/v1/orders/{{orderId}}",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "orders", "{{orderId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 200', () => pm.response.to.have.status(200));",
                  "pm.expect(pm.response.json().success).to.eql(true);"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Order Status",
          "request": {
            "method": "PATCH",
            "header": [
              { "key": "Authorization", "value": "Bearer {{jwtToken}}" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \"status\": \"done\" }"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/orders/{{orderId}}/status",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "orders", "{{orderId}}", "status"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 200', () => pm.response.to.have.status(200));",
                  "pm.expect(pm.response.json().success).to.eql(true);"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Cancel Order",
          "request": {
            "method": "DELETE",
            "header": [
              { "key": "Authorization", "value": "Bearer {{jwtToken}}" }
            ],
            "url": {
              "raw": "{{baseUrl}}/v1/orders/{{orderId}}",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "orders", "{{orderId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Cancel order OK', () => pm.response.to.have.status(200));",
                  "pm.expect(pm.response.json().success).to.eql(true);"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    }
  ]
}