openapi: 3.0.3
info:
  title: Microservices API
  version: "0.1.0"
  description: >
    Gateway API for users and orders services.
    Responses follow the envelope: { success: boolean, data?: any, error?: { code, message } }.
servers:
  - url: http://localhost:3000
tags:
  - name: health
    description: Health checks
  - name: users
    description: User management (registration, auth, profile, admin list)
  - name: orders
    description: Order management (create, read, list, update status, cancel)
paths:
  /v1/health:
    get:
      tags: [health]
      summary: Health check (gateway)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessHealth'

  /v1/users/register:
    post:
      tags: [users]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '200':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessCreatedId'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/users/login:
    post:
      tags: [users]
      summary: Login and get JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Returns JWT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessToken'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/users/me:
    get:
      tags: [users]
      summary: Get current user's profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessUser'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags: [users]
      summary: Update current user's profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: Updated profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessUser'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/users:
    get:
      tags: [users]
      summary: List users (admin only)
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - name: email
          in: query
          schema:
            type: string
          description: Filter by email substring
      responses:
        '200':
          description: Paginated list of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessUsersList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (not admin)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/orders:
    post:
      tags: [orders]
      summary: Create order for current user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreate'
      responses:
        '200':
          description: Created order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessOrder'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags: [orders]
      summary: List orders of current user (paginated)
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - name: sort
          in: query
          schema:
            type: string
            enum: [createdAt, total]
            default: createdAt
          description: Sort by field (prefix with "-" for desc)
      responses:
        '200':
          description: Paginated orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessOrdersList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/orders/{id}:
    get:
      tags: [orders]
      summary: Get order by id (owner or admin)
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/orderId'
      responses:
        '200':
          description: Order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessOrder'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags: [orders]
      summary: Delete (cancel) an order (owner or admin)
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/orderId'
      responses:
        '200':
          description: Deleted / cancelled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDeleted'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/orders/{id}/status:
    patch:
      tags: [orders]
      summary: Update order status (owner or admin)
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/orderId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [created, in_progress, done, cancelled]
              required:
                - status
      responses:
        '200':
          description: Updated order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessOrder'
        '400':
          description: Invalid status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  parameters:
    page:
      name: page
      in: query
      description: Page number (1-based)
      schema:
        type: integer
        default: 1
    limit:
      name: limit
      in: query
      description: Page size
      schema:
        type: integer
        default: 10
    orderId:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Envelope error
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: string
              example: invalid_credentials
            message:
              type: string
              example: "Invalid email or password"

    # Generic success envelope with data placeholder (used via allOf)
    SuccessEnvelope:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object

    SuccessHealth:
      allOf:
        - $ref: '#/components/schemas/SuccessEnvelope'
      properties:
        data:
          type: object
          properties:
            service:
              type: string
              example: api-gateway
            status:
              type: string
              example: ok

    SuccessCreatedId:
      allOf:
        - $ref: '#/components/schemas/SuccessEnvelope'
      properties:
        data:
          type: object
          properties:
            id:
              type: string
              format: uuid
              example: "3fa85f64-5717-4562-b3fc-2c963f66afa6"

    SuccessToken:
      allOf:
        - $ref: '#/components/schemas/SuccessEnvelope'
      properties:
        data:
          type: object
          properties:
            token:
              type: string
              example: "eyJhbGciOiJI..."
    SuccessUser:
      allOf:
        - $ref: '#/components/schemas/SuccessEnvelope'
      properties:
        data:
          $ref: '#/components/schemas/User'

    SuccessUsersList:
      allOf:
        - $ref: '#/components/schemas/SuccessEnvelope'
      properties:
        data:
          type: object
          properties:
            total:
              type: integer
              example: 1
            items:
              type: array
              items:
                $ref: '#/components/schemas/User'

    SuccessOrder:
      allOf:
        - $ref: '#/components/schemas/SuccessEnvelope'
      properties:
        data:
          $ref: '#/components/schemas/Order'

    SuccessOrdersList:
      allOf:
        - $ref: '#/components/schemas/SuccessEnvelope'
      properties:
        data:
          type: object
          properties:
            total:
              type: integer
              example: 3
            items:
              type: array
              items:
                $ref: '#/components/schemas/Order'

    SuccessDeleted:
      allOf:
        - $ref: '#/components/schemas/SuccessEnvelope'
      properties:
        data:
          type: object
          properties:
            id:
              type: string
              format: uuid

    UserCreate:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
        name:
          type: string
      required:
        - email
        - password
        - name

    UserLogin:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
      required:
        - email
        - password

    UserUpdate:
      type: object
      properties:
        name:
          type: string
        password:
          type: string
          minLength: 6

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        roles:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      example:
        id: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
        email: "ivan@example.com"
        name: "Ivan"
        roles: ["user"]
        createdAt: "2025-01-01T12:00:00Z"
        updatedAt: "2025-01-01T12:00:00Z"

    OrderItem:
      type: object
      properties:
        productId:
          type: string
        quantity:
          type: integer
          minimum: 1
        price:
          type: number
          minimum: 0
      example:
        productId: "sku-123"
        quantity: 2
        price: 12.5

    OrderCreate:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
      required:
        - items

    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        status:
          type: string
          enum: [created, in_progress, done, cancelled]
        total:
          type: number
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      example:
        id: "c4f1f4d0-9c4f-4b8f-9b98-1a2b3c4d5e6f"
        userId: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
        items:
          - productId: "sku-123"
            quantity: 2
            price: 12.5
        status: created
        total: 25.0
        createdAt: "2025-01-01T12:00:00Z"
        updatedAt: "2025-01-01T12:00:00Z"
